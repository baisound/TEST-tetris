[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "tetris-game"
version = "1.0.0"
description = "Pythonで作成されたテトリスゲーム"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Code", email = "noreply@anthropic.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment :: Puzzle Games",
]
requires-python = ">=3.8"
dependencies = [
    "pygame>=2.5.2",
    "Pillow>=10.2.0",
    "requests>=2.31.0",
    "pydantic>=2.5.3",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
gui = [
    "customtkinter>=5.2.2",
    "PyQt6>=6.6.1",
    "tkinter-modern>=0.2.1",
]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.3",
]
build = [
    "pyinstaller>=6.3.0",
    "cx-Freeze>=6.15.16",
    "auto-py-to-exe>=2.43.1",
]
data = [
    "numpy>=1.26.3",
    "pandas>=2.2.0",
]

[project.urls]
Homepage = "https://github.com/example/tetris-game"
Repository = "https://github.com/example/tetris-game.git"
Issues = "https://github.com/example/tetris-game/issues"

[project.scripts]
tetris = "tetris_game.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
tetris_game = ["assets/*", "config/*"]

# テストツール設定
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# コードフォーマッター設定
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = "\\.pyi?$"
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.hg
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# 型チェッカー設定
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# カバレッジ設定
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# リンター設定
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]